[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "cloud-models-classifier"
version = "1.0.0"
description = "Clasificador inteligente de modelos de nube usando NLP con DeepSeek"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Tu Nombre", email = "tu.email@ejemplo.com"}
]
maintainers = [
    {name = "Tu Nombre", email = "tu.email@ejemplo.com"}
]
keywords = [
    "cloud-computing",
    "iaas", 
    "paas",
    "saas",
    "faas",
    "nlp",
    "deepseek",
    "openrouter",
    "classification",
    "machine-learning",
    "artificial-intelligence"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Linguistic",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.8"
dependencies = [
    "requests>=2.31.0,<3.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0,<8.0.0",
    "pytest-cov>=4.1.0,<5.0.0",
    "pytest-html>=3.2.0,<4.0.0",
    "pytest-benchmark>=4.0.0,<5.0.0",
    "flake8>=6.0.0,<7.0.0",
    "black>=23.0.0,<24.0.0",
    "mypy>=1.5.0,<2.0.0",
]
test = [
    "pytest>=7.4.0,<8.0.0",
    "pytest-cov>=4.1.0,<5.0.0",
    "pytest-html>=3.2.0,<4.0.0",
]
doc = [
    "sphinx>=7.0.0,<8.0.0",
    "sphinx-rtd-theme>=1.3.0,<2.0.0",
]

[project.scripts]
cloud-classifier = "src.demo:ejecutar_demo"
run-tests = "tests.ejecutar_pruebas:main"

[project.urls]
Homepage = "https://github.com/tu-usuario/cloud-models-classifier"
Documentation = "https://github.com/tu-usuario/cloud-models-classifier#readme"
Repository = "https://github.com/tu-usuario/cloud-models-classifier"
"Bug Tracker" = "https://github.com/tu-usuario/cloud-models-classifier/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*", "tests*"]

[tool.setuptools.package-data]
"*" = ["*.md", "*.txt", "*.ini", "*.env"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src", "tests"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "tests.*",
]
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--strict-config",
]
markers = [
    "basico: Pruebas básicas del clasificador",
    "avanzado: Pruebas avanzadas del clasificador", 
    "edge: Pruebas edge del clasificador",
    "integration: Pruebas de integración",
    "slow: Pruebas lentas (requieren API)",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
