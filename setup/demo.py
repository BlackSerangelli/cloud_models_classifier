"""
M√≥dulo de demostraci√≥n para mostrar el uso del clasificador de modelos de nube.
"""

from . import ClasificadorModelosNube


class DemostradorClasificador:
    """Clase para demostrar el uso del clasificador."""
    
    def __init__(self):
        """Inicializa el demostrador."""
        self.clasificador = ClasificadorModelosNube(usar_nlp=True)
    
    def ejecutar_demo_basica(self):
        """Ejecuta una demostraci√≥n b√°sica del clasificador."""
        print("=== DEMOSTRACI√ìN B√ÅSICA DEL CLASIFICADOR ===")
        print("ü§ñ Usando DeepSeek a trav√©s de OpenRouter para an√°lisis de texto real\n")
        
        ejemplos = [
            "AWS EC2 proporciona servidores virtuales escalables en la nube",
            "Heroku ofrece una plataforma para desplegar aplicaciones web f√°cilmente",
            "Salesforce es una aplicaci√≥n CRM que se accede desde el navegador",
            "AWS Lambda ejecuta funciones sin servidor basadas en eventos",
            "Google Cloud Storage es un servicio de almacenamiento en la nube"
        ]
        
        for i, texto in enumerate(ejemplos, 1):
            print(f"üìã Ejemplo {i}:")
            print(f"Texto: {texto}")
            
            try:
                resultado = self.clasificador.clasificar(texto)
                
                if resultado.modelo == "Error":
                    print(f"‚ùå Error en la clasificaci√≥n")
                else:
                    print(f"üéØ Modelo predicho: {resultado.modelo}")
                    print(f"üìä Confianza: {resultado.confianza:.2f}")
                    print("üìà Puntajes:")
                    for tipo_modelo, puntaje in resultado.puntajes.items():
                        print(f"  {tipo_modelo}: {puntaje:.2f}")
                
            except ValueError as e:
                print(f"‚ùå Error de validaci√≥n: {e}")
            except Exception as e:
                print(f"‚ùå Error: {e}")
            
            print("-" * 50)
    
    def clasificar_texto_personalizado(self, texto: str):
        """
        Clasifica un texto personalizado proporcionado por el usuario.
        
        Args:
            texto: Texto a clasificar
        """
        print(f"\nüîç CLASIFICANDO TEXTO PERSONALIZADO")
        print(f"Texto: {texto}")
        print("-" * 50)
        
        try:
            resultado = self.clasificador.clasificar(texto)
            
            if resultado.modelo == "Error":
                print(f"‚ùå Error en la clasificaci√≥n")
            else:
                print(f"üéØ Modelo predicho: {resultado.modelo}")
                print(f"üìä Confianza: {resultado.confianza:.2f}")
                print("üìà Puntajes:")
                for tipo_modelo, puntaje in resultado.puntajes.items():
                    print(f"  {tipo_modelo}: {puntaje:.2f}")
                
                print(f"\nüìù Informaci√≥n adicional:")
                print(f"  Texto original: {resultado.texto_original}")
                print(f"  Texto procesado: {resultado.texto_procesado}")
                print(f"  M√©todo usado: {resultado.metodo}")
            
        except ValueError as e:
            print(f"‚ùå Error de validaci√≥n: {e}")
        except Exception as e:
            print(f"‚ùå Error: {e}")
    
    def mostrar_informacion_clasificador(self):
        """Muestra informaci√≥n sobre el clasificador."""
        print("‚ÑπÔ∏è  INFORMACI√ìN DEL CLASIFICADOR")
        print("=" * 50)
        print("‚Ä¢ Usa NLP real con DeepSeek a trav√©s de OpenRouter")
        print("‚Ä¢ Clasifica en 4 modelos: IaaS, PaaS, SaaS, FaaS")
        print("‚Ä¢ Maneja errores ortogr√°ficos y texto mal escrito")
        print("‚Ä¢ Proporciona nivel de confianza para cada clasificaci√≥n")
        print("‚Ä¢ Configuraci√≥n flexible mediante variables de entorno")
        print("=" * 50)


def ejecutar_demo():
    """Funci√≥n para ejecutar la demostraci√≥n completa."""
    demostrador = DemostradorClasificador()
    
    # Mostrar informaci√≥n
    demostrador.mostrar_informacion_clasificador()
    
    # Ejecutar demo b√°sica
    demostrador.ejecutar_demo_basica()
    
    # Ejemplo de texto personalizado
    texto_personalizado = "Microsoft Azure proporciona servicios de computaci√≥n en la nube"
    demostrador.clasificar_texto_personalizado(texto_personalizado)
